do (page_template) {

"Introduction" h1

"""
This is a quick introduction to Kitten. It glosses over some nuances of the
language in order to provide a fast, high-level overview so you can quickly get
started with using Kitten. I’m working on a more complete treatment of how to
use Kitten in the form of a <a href='/tutorial/'>tutorial</a>.
""" p

"Comments" h2

"Comments are C-style. Multi-line comments are allowed to nest." p

"""
<span class='kitten comment'>// Single-line comment.</span>

<span class='kitten comment'>/*
  Multi-line
  comment.
*/</span>

<span class='kitten comment'>/*
  Nested

  /* multi-line */

  comment.
*/</span>
""" example

"Literals" h2

"""
Integers consist of decimal digits, or a base prefix and digits in the
corresponding base. They have type
<code><span class='kitten type'>Int32</span></code> by default; this can be
overridden with a suffix.
""" p

"""
<span class='kitten literal'>6</span>       // Decimal
<span class='kitten literal'>0b1010</span>  // Binary
<span class='kitten literal'>0o755</span>   // Octal
<span class='kitten literal'>0x10</span>    // Hexadecimal
<span class='kitten literal'>5i64</span>    // Decimal Int64
<span class='kitten literal'>0xFFu8</span>  // Hexadecimal UInt8
""" example

"""
Floating-point numbers consist of decimal digits, a decimal point
(<code>.</code>), a fractional part, and an optional exponent. They have type
<code><span class='kitten type'>Float64</span></code> by default, and this can
also be overridden with a suffix.
""" p

"""
<span class='kitten literal'>6.28</span>    // Regular notation
<span class='kitten literal'>.5</span>      // Leading digit omitted
<span class='kitten literal'>1.0e+9</span>  // Scientific notation
<span class='kitten literal'>2.0f32</span>  // Float32
""" example

"""
Text literals use double-quotes
(<code><span class='kitten literal'>""</span></code>), and are syntactic sugar
for lists of characters. They have type
<code><span class='kitten type'>List</span>&lt;<span class='kitten type'>Char</span>&gt;</code>.
Common character escapes are allowed using a backslash <code>\\</code>. Character
literals use single quotes (<code><span class='kitten literal'>''</span></code>).
""" p

"""
<span class='kitten comment'>// []</span>
<span class='kitten literal'>""</span>

<span class='kitten comment'>// ['M', 'e', 'o', 'w', '!', '\\n']</span>
<span class='kitten literal'>"Meow!\\n"</span>
""" example

"""
Ordinary text literals can’t contain newlines; a multi-line text literal is
called a <em>paragraph</em> and consists of text wrapped in three double-quote
marks. Paragraphs may be indented, and the indentation is stripped from each
line.
""" p

"""

<span class='kitten literal'>\"\"\"
Here’s a paragraph.
It contains multiple lines.
(Haiku optional.)
\"\"\"</span>

  <span class='kitten literal'>\"\"\"
  1 2 3 4 5
  6 7 8 9 10

  11 12
  \"\"\"</span>

<span class='kitten comment'>// Equivalent to:</span>

<span class='kitten literal'>"Here’s a paragraph.\\nIt contains multiple lines.\\n(Haiku optional.)"</span>

<span class='kitten literal'>"1 2 3 4 5\\n6 7 8 9 10\\n\\n11 12"</span>
""" example

"Lists" h2

"""
Lists are surrounded by square brackets (<code>[]</code>) with comma-separated
elements of the same type. They have type
<code><span class='kitten type'>List</span>&lt;<span class='kitten type'>T</span>&gt;</code>
where <code><span class='kitten type'>T</span></code> is the type of the
elements. A trailing comma is allowed after the last element.
""" p

"""
<span class='kitten comment'>// &lt;T&gt; List&lt;T&gt;</span>
[]

<span class='kitten comment'>// List&lt;Int32&gt;</span>
[<span class='kitten literal'>1</span>, <span class='kitten literal'>2</span>, <span class='kitten literal'>3</span>]

<span class='kitten comment'>// List&lt;List&lt;Char&gt;&gt;</span>
[
  <span class='kitten literal'>"four"</span>,
  <span class='kitten literal'>"five"</span>,
  <span class='kitten literal'>"six"</span>,
]
""" example

"""
Note that the type of <code>[]</code> is
<code>&lt;<span class='kitten type'>T</span>&gt; <span class='kitten type'>List</span>&lt;<span class='kitten type'>T</span>&gt;</code>:
an empty list may be used where a list of any type is expected.
""" p

"Expressions and Stack-based Evaluation" h2

"""
Kitten is an <em>expression language</em>; there are no statements, only
expressions that compute a result. Expressions may use infix operators with
different precedences, as in many other languages. Kitten operators are not
built into the language—they are ordinary functions with symbolic names.
""" p

"""
<span class='kitten comment'>// (2 * 2) + (3 * 3)</span>
<span class='kitten literal'>2</span> * <span class='kitten literal'>2</span> + <span class='kitten literal'>3</span> * <span class='kitten literal'>3</span>
""" example

"""
The biggest syntactic difference between Kitten and C-like languages is that
function calls are <em>postfix</em>: the function name is written <em>after</em>
the arguments. Instead of <code>f(x, y)</code>, we write <code>x y f</code>. You
can think of this like a generalization of the method-call syntax
<code>x.f()</code> in many object-oriented languages, and it easily permits
chaining multiple functions together in a “pipeline”.
""" p

"""
<span class='kitten literal'>"Meow!\\n"</span> print

<span class='kitten comment'>// Prints "3-" followed by a newline.</span>
<span class='kitten literal'>-3</span> abs neg show reverse say
""" example

"""
You can call an operator in postfix form by wrapping it in parentheses. You can
also partially apply one operand:
<code>(/ <span class='kitten literal'>3</span>)</code> (“divide by three”) is
shorthand for
<code>-&gt; x; x / <span class='kitten literal'>3</span></code>; likewise,
<code>(<span class='kitten literal'>1</span> -)</code>
(“one minus”) is short for
<code>-&gt; x; <span class='kitten literal'>1</span> - x</code>.
""" p

"""
<span class='kitten literal'>2</span> <span class='kitten literal'>2</span> (*) <span class='kitten literal'>3</span> <span class='kitten literal'>3</span> (*) (+)

<span class='kitten comment'>// (x * 2)</span>
x (* <span class='kitten literal'>2</span>)

<span class='kitten comment'>// (2 - x)</span>
x (<span class='kitten literal'>2</span> -)
""" example

"""
Here we start to see Kitten’s stack-based evaluation model. When computing
<code><span class='kitten literal'>2</span> <span class='kitten literal'>2</span> (*)</code>,
we push <code><span class='kitten literal'>2</span></code> to the
<em>data stack</em>, push another
<code><span class='kitten literal'>2</span></code>, then call <code>*</code> to
multiply them, leaving the result on the stack. So one way to read postfix code
is as a sequence of imperative commands operating on the stack.
""" p

"""
<span class='kitten literal'>2</span>    <span class='kitten comment'>// push 2   => 2</span>
<span class='kitten literal'>2</span>    <span class='kitten comment'>// push 2   => 2 2</span>
(*)  <span class='kitten comment'>// multiply => 4</span>
<span class='kitten literal'>3</span>    <span class='kitten comment'>// push 3   => 4 3</span>
<span class='kitten literal'>3</span>    <span class='kitten comment'>// push 3   => 4 3 3</span>
(*)  <span class='kitten comment'>// multiply => 4 9</span>
(+)  <span class='kitten comment'>// add      => 13</span>
""" example

"""
However, this is the low-level way to think about Kitten programs. At a high
level, postfix syntax can be thought of as representing a data flow graph.
""" p

"""
<table>
<tr><td><code>2</code></td><td><code>2</code></td><td><code>3</code></td><td><code>3</code></td></tr>
<tr><td class='open'>↓ <code>2</code></td><td class='open'>↓ <code>2</code></td><td class='open'>↓ <code>3</code></td><td class='open'>↓ <code>3</code></td></tr>
<tr><td colspan='2'><code>*</code></td><td colspan='2'><code>*</code></td></tr>
<tr><td class='open' colspan='2'>↓ <code>4</code></td><td class='open' colspan='2'>↓ <code>9</code></td></tr>
<tr><td colspan='4'><code>+</code></td></tr>
<tr><td class='open' colspan='4'>↓ <code>13</code></td></tr>
</table>
""" print

"Locals" h2

"""
Local variables can be introduced with the <code>-&gt; name;</code> syntax
(or Unicode <code>→ name;</code>). This takes a value from the stack and
stores it in a local variable for the remainder of scope. Mentioning a local
has the effect of pushing its value to the stack.
""" p

"""
<span class='kitten comment'>// 25</span>
<span class='kitten literal'>5</span> -&gt; x; x * x
""" example

"""
We can also introduce multiple variables at once; they are taken from the stack
in the order they were pushed.
""" p

"""
<span class='kitten literal'>1</span> <span class='kitten literal'>2</span> <span class='kitten literal'>3</span> -&gt; x, y, z;

x say  <span class='kitten comment'>// 1</span>
y say  <span class='kitten comment'>// 2</span>
z say  <span class='kitten comment'>// 3</span>
""" example

"""
Local variables are always immutable. Pushing a local to the stack once simply
<em>moves</em> its value (as if by <code>memcpy</code>); pushing the variable
multiple times <em>copies</em> its value, as long as the type is copyable.
""" p

"Conditionals and Blocks" h2

"""
Conditional execution uses the
<code><span class='kitten keyword'>if</span></code>…<code><span class='kitten keyword'>elif</span></code>…<code><span class='kitten keyword'>else</span></code>
expression. Blocks can be surrounded by curly braces <code>{}</code> like in C,
or prefixed with a colon <code>:</code> and delimited by indentation like in
Python. The <code>:</code> form is called “layout” and desugars into the
<code>{}</code> form.
""" p

"""
<span class='kitten keyword'>if</span> (food_dish is_empty) {
  <span class='kitten literal'>":<"</span> say
  beg_for_food
} <span class='kitten keyword'>elif</span> (mouse_nearby) {
  eat_mouse
} <span class='kitten keyword'>else</span> {
  purr
}

<span class='kitten keyword'>if</span> (food_dish is_empty):
  <span class='kitten literal'>":<"</span> say
  beg_for_food
<span class='kitten keyword'>elif</span> (mouse_nearby):
  eat_mouse
<span class='kitten keyword'>else</span>:
  purr
""" example

"""
Layout syntax is generally preferred for multi-line blocks.
""" p

"""
You can omit the condition part of an <code><span class='kitten keyword'>if</span></code> expression to take it from
the stack. For example, here’s how the standard <code>not</code> word is defined.
""" p

"""
// Start with a local variable…
-> x; <span class='kitten keyword'>if</span> (x) { false } <span class='kitten keyword'>else</span> { true }

// …take it from the stack…
-> x; x <span class='kitten keyword'>if</span> { false } <span class='kitten keyword'>else</span> { true }

// …and remove the redundancy.
<span class='kitten keyword'>if</span> { false } <span class='kitten keyword'>else</span> { true }
""" example

"""
An <code><span class='kitten keyword'>if</span></code> without an
<code><span class='kitten keyword'>else</span></code> is equivalent to an
<code><span class='kitten keyword'>if</span></code> with an empty
<code><span class='kitten keyword'>else</span></code> block. In other words, the
<code><span class='kitten keyword'>else</span></code> branch is the identity
function.
""" p

"""
<span class='kitten keyword'>if</span> (have_food) { purr }
<span class='kitten keyword'>if</span> (have_food) { purr } <span class='kitten keyword'>else</span> {}
""" example

"Algebraic Data Types" h2

"""
Kitten has <em>algebraic data types</em> (ADTs) defined with the
<code><span class='kitten keyword'>type</span></code> keyword. A type may have any number of <em>constructors</em>,
introduced with the <code><span class='kitten keyword'>case</span></code> keyword, and each constructor may have
any number of fields, with the field types given in parentheses.
""" p

"""
<span class='kitten comment'>// Enumeration</span>
<span class='kitten comment'>// Multiple constructors with no fields</span>
<span class='kitten keyword'>type</span> <span class='kitten type'>Bool</span>:
  <span class='kitten keyword'>case</span> false
  <span class='kitten keyword'>case</span> true

<span class='kitten comment'>// Enumeration</span>
<span class='kitten comment'>// Explicitly indicating no fields</span>
<span class='kitten keyword'>type</span> <span class='kitten type'>Bool</span>:
  <span class='kitten keyword'>case</span> false ()
  <span class='kitten keyword'>case</span> true ()

<span class='kitten comment'>// Structure</span>
<span class='kitten comment'>// One constructor with multiple fields</span>
<span class='kitten keyword'>type</span> <span class='kitten type'>Pair</span>&lt;<span class='kitten type'>A</span>, <span class='kitten type'>B</span>&gt;:
  <span class='kitten keyword'>case</span> pair (<span class='kitten type'>A</span>, <span class='kitten type'>B</span>)

<span class='kitten comment'>// A pair of type Pair&lt;Float64, Char&gt;</span>
<span class='kitten literal'>2.0</span> <span class='kitten literal'>'x'</span> pair

<span class='kitten comment'>// Tagged Union</span>
<span class='kitten comment'>// Multiple constructors</span>
<span class='kitten comment'>// with different numbers of fields</span>
<span class='kitten keyword'>type</span> <span class='kitten type'>Optional</span>&lt;<span class='kitten type'>T</span>&gt;:
  <span class='kitten keyword'>case</span> none
  <span class='kitten keyword'>case</span> some (<span class='kitten type'>T</span>)

<span class='kitten comment'>// An empty Optional</span>
<span class='kitten comment'>// of type &lt;T&gt; Optional&lt;T&gt;</span>
none

<span class='kitten comment'>// A full Optional</span>
<span class='kitten comment'>// of type Optional&lt;Int32&gt;</span>
<span class='kitten literal'>5</span> some
""" example

"""
A <code><span class='kitten keyword'>match</span></code> expression takes an
instance of an ADT, matches on its tag, and unpacks its fields (if any) onto
the stack so they can be manipulated. You can think of
<code><span class='kitten keyword'>match</span></code> as the <em>inverse</em>
of a constructor: whereas <code>pair</code> has the type
<code><span class='kitten type'>A</span>, <span class='kitten type'>B</span> -&gt; <span class='kitten type'>Pair</span>&lt;<span class='kitten type'>A</span>, <span class='kitten type'>B</span>&gt;</code>, the expression
<code>-&gt; p; <span class='kitten keyword'>match</span> (p) <span class='kitten keyword'>case</span> pair {}</code>
has the type <code><span class='kitten type'>Pair</span>&lt;<span class='kitten type'>A</span>, <span class='kitten type'>B</span>&gt; -&gt; <span class='kitten type'>A</span>, <span class='kitten type'>B</span></code>—the inputs and outputs
are swapped.
""" p

// TODO: link functions (e.g. "head") to their docs.

"""
<span class='kitten keyword'>match</span> (xs head)
<span class='kitten keyword'>case</span> some:
  -&gt; x;
  <span class='kitten literal'>"Non-empty list; first value: "</span> print
  x say
<span class='kitten keyword'>case</span> none:
  <span class='kitten literal'>"Empty list."</span> say
""" example

"""
The value being pattern-matched (<code>x</code> in <code><span class='kitten keyword'>match</span> (x)</code>) is
called the <em>scrutinee</em>. Similarly to
<code><span class='kitten keyword'>if</span></code>, you can omit this
from a <code><span class='kitten keyword'>match</span></code> expression, in
which case the value is taken from the stack. That is,
<code><span class='kitten keyword'>match</span> (x) <span class='kitten keyword'>case</span> <span class='kitten comment'>/* ... */</span></code>
is equivalent to <code>x <span class='kitten keyword'>match</span> <span class='kitten keyword'>case</span> <span class='kitten comment'>/* ... */</span></code>.
""" p

"""
This code constructs a pair, deconstructs it, swaps its elements, and makes a
new swapped pair.
""" p

"""
// (1, 2)
<span class='kitten literal'>1</span> <span class='kitten literal'>2</span> pair

// (2, 1)
<span class='kitten keyword'>match</span> <span class='kitten keyword'>case</span> pair { swap pair }
""" example

"""
A <code><span class='kitten keyword'>match</span></code> expression may include
an <code><span class='kitten keyword'>else</span></code> branch, which
is executed if none of the cases matched. If a
<code><span class='kitten keyword'>match</span></code> expression
does not include a <code><span class='kitten keyword'>case</span></code> for
every constructor of a data type, and has no
<code><span class='kitten keyword'>else</span></code> branch, it’s called
<em>non-exhaustive</em>. In that case, the compiler produces an implicit
<code><span class='kitten keyword'>else</span></code> branch, which calls
<code>fail</code> to abort the program with an error message. This also causes
the <code><span class='kitten keyword'>match</span></code> expression to require
the <code>+<span class='kitten type'>Fail</span></code> permission, which will
be explained later on.
""" p

"Function Definitions" h2

"""
You can define new functions with the
<code><span class='kitten keyword'>define</span></code> keyword. Every definition
has a name, a type signature, and a body. Type signatures are written in
parentheses, with the input and output types to the left and right,
respectively, of an ASCII rightwards arrow <code>-&gt;</code> or its Unicode
equivalent <code>→</code> (U+2192).
""" p

"""
This definition squares a number by copying it and multiplying it with itself.
""" p

"""
<span class='kitten keyword'>define</span> square (<span class='kitten type'>Int32</span> -&gt; <span class='kitten type'>Int32</span>):
  dup (*)
""" example

"""
A user-defined function, just like any other function, is called when we mention
its name.
""" p

"""
<span class='kitten comment'>// 16</span>
<span class='kitten literal'>4</span> square
""" example

"""
To push a function to the stack instead of calling it, wrap it in a block. This
denotes an anonymous function, called a <em>quotation</em>. Quotations are often
used with <em>higher-order functions</em> which take other functions as
arguments, such as <code>map</code>, <code>filter</code>,
<code>fold_left</code>, and <code>zip_with</code>.
""" p

"""
<span class='kitten comment'>// [1, 4, 9]</span>
[<span class='kitten literal'>1</span>, <span class='kitten literal'>2</span>, <span class='kitten literal'>3</span>] { square } map

<span class='kitten comment'>// [10, 20, 30]</span>
[<span class='kitten literal'>1</span>, <span class='kitten literal'>2</span>, <span class='kitten literal'>3</span>] { (* <span class='kitten literal'>10</span>) } map
""" example

"""
The backslash syntax <code>\\f</code> is a slightly more succinct equivalent,
with the advantage that an operator can be referred to as simply
<code>\\+</code> instead of <code>{ (+) }</code>. Mnemonically, this is
“escaping” the function to prevent it from being evaluated. This also works with
partially applied operators.
""" p

"""
<span class='kitten comment'>// [1, 4, 9]</span>
[<span class='kitten literal'>1</span>, <span class='kitten literal'>2</span>, <span class='kitten literal'>3</span>] \\square map

<span class='kitten comment'>// [2, 3, 4]</span>
[<span class='kitten literal'>1</span>, <span class='kitten literal'>2</span>, <span class='kitten literal'>3</span>] \\(+ <span class='kitten literal'>1</span>) map

<span class='kitten comment'>// [4, 10, 18]</span>
[<span class='kitten literal'>1</span>, <span class='kitten literal'>2</span>, <span class='kitten literal'>3</span>] [<span class='kitten literal'>4</span>, <span class='kitten literal'>5</span>, <span class='kitten literal'>6</span>] \\* zip_with
""" example

"Lambdas" h2

"""
Whereas Kitten decouples the concepts of local variable bindings
(<code>-&gt;</code>…<code>;</code>…) and anonymous functions
(<code>{</code>…<code>}</code>) by default, in practice we often want to couple these
things together. For example, in a <code><span class='kitten keyword'>match</span></code> expression, we often want
to name the values we extracted, if present. We <em>could</em> use a local
variable binding inside a block:
""" p

"""
<span class='kitten keyword'>match</span> (xs head)
<span class='kitten keyword'>case</span> some:
  -&gt; x;
  x say
<span class='kitten keyword'>else</span>:
  <span class='kitten literal'>"nothing"</span> say
""" example

"""
But we can also use the combined “lambda” form,
<code>-&gt;</code>…<code>{</code>…<code>}</code>,
which is compatible with the usual layout syntax for blocks:
""" p

"""
<span class='kitten keyword'>match</span> (xs head)
<span class='kitten keyword'>case</span> some -&gt; x {
  x say
} <span class='kitten keyword'>else</span> {
  <span class='kitten literal'>"nothing"</span> say
}

<span class='kitten keyword'>match</span> (xs head)
<span class='kitten keyword'>case</span> some -&gt; x:
  x say
<span class='kitten keyword'>else</span>:
  <span class='kitten literal'>"nothing"</span> say
""" example

"""
<code>-&gt; x y z { x + y + z }</code> is exactly equivalent to
<code>{ -&gt; x y z; x + y + z }</code>. Note that this also works on
definitions.
""" p

"""
<span class='kitten keyword'>define</span> square
(<span class='kitten type'>Int32</span> -&gt; <span class='kitten type'>Int32</span>)
-&gt; x:
  x * x
""" example

"Multiple Inputs and Outputs" h2

"""
As in most languages, functions can take multiple inputs. In the type
signature, their types are separated by commas.
""" p

"""
<span class='kitten keyword'>define</span> multiply3
(<span class='kitten type'>Float64</span>, <span class='kitten type'>Float64</span>, <span class='kitten type'>Float64</span> -&gt; <span class='kitten type'>Float64</span>):
  -&gt; x, y, z;
  x * y * z
""" example

"""
Notice what happens when we write this function in postfix:
""" p

"""
<span class='kitten keyword'>define</span> multiply3
(<span class='kitten type'>Float64</span>, <span class='kitten type'>Float64</span>, <span class='kitten type'>Float64</span> -&gt; <span class='kitten type'>Float64</span>):
  -&gt; x, y, z;
  x y z (*) (*)
""" example

"""
We’re pulling <code>x</code>, <code>y</code>, and <code>z</code> off the stack
and pushing them right back! Of course, the compiler can trivially optimize this
away, but it’s redundant. This is a good place to apply Kitten’s common practice
of chaining functions <em>without</em> using local variables. We can just pass
arguments and return values implicitly on the stack.
""" p

"""
<span class='kitten keyword'>define</span> multiply3
(<span class='kitten type'>Float64</span>, <span class='kitten type'>Float64</span>, <span class='kitten type'>Float64</span> -&gt; <span class='kitten type'>Float64</span>):
  (*) (*)
""" example

"""
Unlike most languages, Kitten also allows functions to have multiple
<em>results</em>, which is very useful for writing in a dataflow style.
""" p

"""
<span class='kitten keyword'>define</span> increment_both
(<span class='kitten type'>Int32</span>, <span class='kitten type'>Int32</span> -&gt; <span class='kitten type'>Int32</span>, <span class='kitten type'>Int32</span>):
  -&gt; x, y;
  (x + <span class='kitten literal'>1</span>) (y + <span class='kitten literal'>1</span>)

<span class='kitten keyword'>define</span> increment_both
(<span class='kitten type'>Int32</span>, <span class='kitten type'>Int32</span> -&gt; <span class='kitten type'>Int32</span>, <span class='kitten type'>Int32</span>):
  \\(+ <span class='kitten literal'>1</span>) to_both
""" example

"""
<code>to_both</code> is a handy combinator: it takes one function and two
values, and applies the function to both of the values.
""" p

"Polymorphism" h2

"""
Type signatures often include <em>type variables</em>, which enable
polymorphism. For example, here is a simple recursive function to reverse a
list:
""" p

"""
<span class='kitten keyword'>define</span> reverse&lt;<span class='kitten type'>T</span>&gt;
(<span class='kitten type'>List</span>&lt;<span class='kitten type'>T</span>&gt; -&gt; <span class='kitten type'>List</span>&lt;<span class='kitten type'>T</span>&gt;):
  -&gt; xs;
  <span class='kitten keyword'>match</span> (xs head_tail)
  <span class='kitten keyword'>case</span> some:
    unpair -&gt; h, t;
    t reverse h append
  <span class='kitten keyword'>case</span> none:
    []
""" example

"""
The signature reads:
""" p

"""
// For any type 'T'…
&lt;<span class='kitten type'>T</span>&gt;
(

  // …given a list of values of that type…
  <span class='kitten type'>List</span>&lt;<span class='kitten type'>T</span>&gt;

  // …this function produces…
  -&gt;

  // …another list of values of that type.
  <span class='kitten type'>List</span>&lt;<span class='kitten type'>T</span>&gt;

)
""" example

"""
Functions may be generic in any number of types. For example, the type of the
<code>map</code> function can be written as
<code>&lt;<span class='kitten type'>A</span>, <span class='kitten type'>B</span>&gt; (<span class='kitten type'>List</span>&lt;<span class='kitten type'>A</span>&gt;, (<span class='kitten type'>A</span> -&gt; <span class='kitten type'>B</span>) -&gt; <span class='kitten type'>List</span>&lt;<span class='kitten type'>B</span>&gt;)</code>.
It takes a list of <code><span class='kitten type'>A</span></code> values, and a function from <code><span class='kitten type'>A</span></code> to
<code><span class='kitten type'>B</span></code>, and returns a list of <code><span class='kitten type'>B</span></code> values. <code><span class='kitten type'>A</span></code> and
<code><span class='kitten type'>B</span></code> may refer to the same type or different types.
""" p

"""
<span class='kitten comment'>// Same type (Int32 -&gt; Int32)</span>
<span class='kitten comment'>// [1, 2, 3, 4]</span>
[<span class='kitten literal'>3</span>, <span class='kitten literal'>6</span>, <span class='kitten literal'>9</span>, <span class='kitten literal'>12</span>] { (/ <span class='kitten literal'>3</span>) } map

<span class='kitten comment'>// Different types (Int32 -&gt; List&lt;Char&gt;)</span>
<span class='kitten comment'>// ["3", "6", "9", "12"]</span>
[<span class='kitten literal'>3</span>, <span class='kitten literal'>6</span>, <span class='kitten literal'>9</span>, <span class='kitten literal'>12</span>] \\show map
""" example

"Permissions" h2

"""
We’ve seen functions such as <code>say</code> that have <em>side
effects</em>. Kitten’s type system includes a concept of <em>permissions</em>,
which track the side effects that a function is allowed to perform.
<code>say</code>, <code>print</code>, <code>newline</code>, and other such
output functions require the <code>+<span class='kitten type'>IO</span></code> permission because they perform
I/O, and this is reflected in their types.
""" p

"""
<span class='kitten comment'>// Takes no inputs,</span>
<span class='kitten comment'>// produces no outputs,</span>
<span class='kitten comment'>// and has permission to do I/O.</span>
<span class='kitten keyword'>define</span> newline (-> +<span class='kitten type'>IO</span>):
  <span class='kitten literal'>"\\n"</span> print
""" example

"""
Some of the standard permissions in Kitten are:
""" p

do (definition_list):

  "<code>+<span class='kitten type'>IO</span></code>"
  "Permission to do I/O, or more generally, break referential transparency."
  definition_item

  "<code>+<span class='kitten type'>Fail</span></code>"
  "Permission to abort the program with an assertion failure."
  definition_item

  "<code>+<span class='kitten type'>Unsafe</span></code>"
  "Permission to break memory safety."
  definition_item

}
